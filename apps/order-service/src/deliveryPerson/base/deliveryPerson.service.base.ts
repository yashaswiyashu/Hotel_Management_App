/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, DeliveryPerson as PrismaDeliveryPerson } from "@prisma/client";

export class DeliveryPersonServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DeliveryPersonCountArgs, "select">
  ): Promise<number> {
    return this.prisma.deliveryPerson.count(args);
  }

  async deliveryPeople(
    args: Prisma.DeliveryPersonFindManyArgs
  ): Promise<PrismaDeliveryPerson[]> {
    return this.prisma.deliveryPerson.findMany(args);
  }
  async deliveryPerson(
    args: Prisma.DeliveryPersonFindUniqueArgs
  ): Promise<PrismaDeliveryPerson | null> {
    return this.prisma.deliveryPerson.findUnique(args);
  }
  async createDeliveryPerson(
    args: Prisma.DeliveryPersonCreateArgs
  ): Promise<PrismaDeliveryPerson> {
    return this.prisma.deliveryPerson.create(args);
  }
  async updateDeliveryPerson(
    args: Prisma.DeliveryPersonUpdateArgs
  ): Promise<PrismaDeliveryPerson> {
    return this.prisma.deliveryPerson.update(args);
  }
  async deleteDeliveryPerson(
    args: Prisma.DeliveryPersonDeleteArgs
  ): Promise<PrismaDeliveryPerson> {
    return this.prisma.deliveryPerson.delete(args);
  }
}
